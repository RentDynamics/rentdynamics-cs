version: 2.1

commands:
  export_release_info:
    steps:
      - run:
          command: |
            echo 'export VERSION=$(cat version.md | head -1)' >> $BASH_ENV
            echo 'export CHANGELOG=$(cat version.md | tail +2)' >> $BASH_ENV
            echo 'export BUILD_DATE=$(date +'%Y%m%d.%s')' >> $BASH_ENV

            echo "Current version is '$VERSION'"
            echo "Build date is '$BUILD_DATE'"
            echo "$CHANGELOG"
      - run:
          command: |
            mkdir release_info && cd release_info
            date +'%Y%m%d' | cat > build_date.txt
      - persist_to_workspace:
          root: release_info
          paths:
            - build_date.txt
jobs:
  build:
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:3.1

    steps:
      - checkout
      - restore_cache:
          keys:
            - dotnet-rd-client-lib
      - export_release_info
      - run:
          name: Compile
          command: dotnet build -c Release --packages .packages -p:Version="$VERSION"
      - run:
          name: Unit Tests
          command: |
            dotnet test -c Release -v normal --logger "trx" --no-restore --no-build --collect:"XPlat Code Coverage"
      - run:
          name: Convert test trx files to JUnit
          command: dotnet tool install -g trx2junit || true && ~/.dotnet/tools/trx2junit RentDynamics.RdClient.Tests/TestResults/*.trx --output test-results
          when: always
      - store_test_results:
          path: test-results
          when: always
      - run:
          name: Upload Code coverage results
          command: |
            dotnet tool install -g codecov.tool || true
            
            covfile=$(find . -name "coverage.cobertura.xml" | head -1)
            echo "Cov file path: $covfile"
            
            ~/.dotnet/tools/codecov -f "$covfile"
          when: always
      - save_cache:
          key: dotnet-rd-client-lib
          paths:
            - .packages
      - run:
          name: Pack Release
          command: dotnet pack -c Release -o out/lib --no-restore --no-build -p:Version="$VERSION"
      - persist_to_workspace:
            root: out
            paths:
              - lib
  publish_nuget_release:
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:3.1
    steps:
      - attach_workspace:
          at: out
      - run:
          name: Publish to Nuget.org
          command: dotnet nuget push out/lib/**/*.nupkg --source https://api.nuget.org/v3/index.json --api-key $NUGET_ORG_API_KEY
  publish_github_release:
    docker:
      - image: cibuilds/github:0.13
    parameters:
      is_prerelease:
        type: boolean
        default: false
    steps:
      - checkout
      - attach_workspace:
          at: out
      - attach_workspace:
          at: release_info
      - run:
          name: Publish Github Release
          command: |
            is_prerelease=<< parameters.is_prerelease >>
            args=()
            args+=('-u' '${CIRCLE_PROJECT_USERNAME}')
            args+=('-t' '${RD_NUGET_PASSWORD}')
            args+=('-r' '${CIRCLE_PROJECT_REPONAME}')
            args+=('-c' '${CIRCLE_SHA1}')
            args+=('-b' "$CHANGELOG")
            args+=('-soft')
            $is_prerelease && args+=('-prerelease')
            args+=("$tag")
            
            echo "ghr args:" "${args[@]}"
            complete_version="${VERSION}_${BUILD_DATE}"
            echo "Complete version is: '$complete_version'"
            
            build_date =$(cat release_info/build_date.txt)
            echo "Build date '$build_date'"

#            ghr_result=$(ghr -u ${CIRCLE_PROJECT_USERNAME} -t ${RD_NUGET_PASSWORD} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -b "$CHANGELOG" -n "v$VERSION" -prerelease -soft "v$VERSION" out/lib)
            
#            echo "$ghr_result"

#            if [[ "$ghr_result" =~ ghr\ aborted\ since\ tag\ .*\ already\ exists ]]
#            then
#              exit 1
#            fi

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build:
          context: DotNetBuild
      - publish_nuget_release:
          context: DotNetBuild
          filters:
            branches:
              only:
                - master
          requires:
            - build
      - publish_github_release:
          context: DotNetBuild
          requires:
            - build
            - publish_nuget_release
      - publish_github_release:
          is_prerelease: true
          context: DotNetBuild
          requires:
            - build
          filters:
            branches:
              only:
                - /.*__dev$/